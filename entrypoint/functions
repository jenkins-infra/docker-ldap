#!/bin/bash

: "${OPENLDAP_SSL_KEY:?Ssl key required}"
: "${OPENLDAP_SSL_CRT:?Ssl certificate required}"
: "${OPENLDAP_SSL_CA:?CA ssl certificate required}"
: "${OPENLDAP_ADMIN_DN:?Admin DN required}"
: "${OPENLDAP_ADMIN_PASSWORD:?Admin password required}"
: "${OPENLDAP_DATABASE:? Ldap database required}"
: "${OPENLDAP_DEBUG_LEVEL:? Ldap database loglevel required cfr:'Slapd config'}"

# Test if ssl certs exist and are valid
function is_ssl_certs {
  if [ ! -f "/etc/ldap/ssl/$OPENLDAP_SSL_KEY" ]; then exit "File /etc/ldap/ssl/${OPENLDAP_SSL_KEY} doesn't exist" ;fi
  if [ ! -f "/etc/ldap/ssl/$OPENLDAP_SSL_CRT" ]; then exit "File /etc/ldap/ssl/${OPENLDAP_SSL_CRT} doesn't exist" ;fi
  if [ ! -f "$OPENLDAP_SSL_CA_ROOTDIR/$OPENLDAP_SSL_CA" ]; then exit "File $OPENLDAP_SSL_CA_ROOTDIR/${OPENLDAP_SSL_CA} doesn't exist" ;fi
  certtool --verify --infile "/etc/ldap/ssl/${OPENLDAP_SSL_CRT}" --load-ca-certificate "${OPENLDAP_SSL_CA_ROOTDIR}/${OPENLDAP_SSL_CA}"

}

# Configure /etc/slapd.conf based on env variable
function configure_slapd() {
  # Generate Admin Password Hash
  local openldap_admin_password_md5
  openldap_admin_password_md5=$(slappasswd -s "$OPENLDAP_ADMIN_PASSWORD")
  echo "Configure slapd"
  # Use # instead of / admin password hash may contain / character
  sed -i "s#OPENLDAP_CONFIG_ADMIN_DN#${OPENLDAP_CONFIG_ADMIN_DN}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_CONFIG_ADMIN_PASSWORD#${OPENLDAP_CONFIG_ADMIN_PASSWORD}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_DATABASE#${OPENLDAP_DATABASE}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_ADMIN_DN#${OPENLDAP_ADMIN_DN}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_ADMIN_PASSWORD#$openldap_admin_password_md5#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_KEY#${OPENLDAP_SSL_KEY}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_CRT#${OPENLDAP_SSL_CRT}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_CA#${OPENLDAP_SSL_CA}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_CA_ROOTDIR#${OPENLDAP_SSL_CA_ROOTDIR}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_KEY#${OPENLDAP_SSL_KEY}#g" /etc/ldap/slapd.conf
  sed -i "s#OPENLDAP_SSL_CRT#${OPENLDAP_SSL_CRT}#g" /etc/ldap/slapd.conf

  # Dynamic configuration is cumbersome to update, so we convert the static configuration file
  # to ldif
  if [ ! -d '/etc/ldap/slapd.d' ]; then
      mkdir /etc/ldap/slapd.d
  fi

  if [ ! -d "$OPENLDAP_BACKUP_PATH" ]; then
      mkdir "$OPENLDAP_BACKUP_PATH"
  fi

  slaptest -u -f /etc/ldap/slapd.conf

  # It's more convenient to update slapd.conf and then convert it to the ldiff format
  # than editing slapd.d files.
  # Convert config file to config dir even if database doesn't exist.
  rm -Rf /etc/ldap/slapd.d && mkdir /etc/ldap/slapd.d
  slaptest -f /etc/ldap/slapd.conf -F /etc/ldap/slapd.d/ | true

  chown -R openldap:openldap /etc/ldap/slapd.d /var/lib/ldap
  chmod 0750 -R /etc/ldap/slapd.d
}

function start_slapd() {
  echo "Start slapd"
  exec /usr/sbin/slapd -h "ldap:/// ldaps:///" -u openldap -g openldap -d"${OPENLDAP_DEBUG_LEVEL}" -F /etc/ldap/slapd.d
}

function backup(){
  local timestamp
  timestamp=$(date '+%Y%m%d%H%M')


  ldapsearch -LLL -w "${OPENLDAP_ADMIN_PASSWORD}" -D "${OPENLDAP_ADMIN_DN}" -b "${OPENLDAP_DATABASE}" | gzip > "${OPENLDAP_BACKUP_PATH}/${timestamp}.${OPENLDAP_BACKUP_FILE}.gz"

  cp "${OPENLDAP_BACKUP_PATH}/${timestamp}.${OPENLDAP_BACKUP_FILE}.gz" "${OPENLDAP_BACKUP_PATH}/${OPENLDAP_BACKUP_FILE}.gz"

  echo "Backup ${OPENLDAP_BACKUP_PATH}/${timestamp}.${OPENLDAP_BACKUP_FILE}.gz created"
  echo "Backup ${OPENLDAP_BACKUP_PATH}/${OPENLDAP_BACKUP_FILE}.gz created"
}

function clean_backup() {
    # Clean all files (not directory), not modified since 60 days
    find "${OPENLDAP_BACKUP_PATH}/" -mtime +60 ! \( -type d \) -delete
}
